#! /bin/sh

wid=$1
class=$2
instance=$3
consequences=$4
procCommand=$(ps -p "$(xdo pid "$wid")" -o comm= 2>/dev/null)

echo $@ >> ~/.rules_cmd.log
echo $procCommand >> ~/.rules_cmd.log

case "$class" in
	'Wrapper-2.0')
        eval "$consequences"
        echo "monitor=west state=floating center=on follow=on rectangle=800x400+0+0"
        ;;
    'jetbrains-datagrip')
        eval "$consequences"
        echo "desktop=2 border=off follow=on"
        ;;
    'Xfce4-panel')
        eval "$consequences"
        echo "monitor=west state=floating follow=on"
        ;;
    'Xfce4-settings-manager') ;&
    'Blueman-manager') ;&
    'Blueberry.py')
        eval "$consequences"
        echo "monitor=west state=floating center=on follow=on"
        ;;
    'Galculator') 
        eval "$consequences"
        echo "state=floating center=on follow=on"
        ;;
    'zoom') ;&
    'zoom ')
        eval "$consequences"
        WM_NAME=$(xprop -notype -id $wid WM_NAME | sed 's%WM_NAME = %%')
        _NET_WM_WINDOW_OPACITY=$(xprop -id $wid _NET_WM_WINDOW_OPACITY | grep -v 'not found')
        _NET_WM_STATE=$(xprop -id $wid _NET_WM_STATE | grep -v 'not found')
        echo "WM_NAME = -$WM_NAME-" >> ~/.rules_cmd.log
        echo "OPACITY = -$_NET_WM_WINDOW_OPACITY-" >> ~/.rules_cmd.log
        if [ $WM_NAME == '"Settings"' ] ; then
            echo -n "state=floating center=on"
        fi
        if [ -z $WM_NAME ] && ([ -n "$_NET_WM_WINDOW_OPACITY" ] || [ -n "$_NET_WM_STATE" ]) ; then
            echo "should be floating and borderless" >> ~/.rules_cmd.log
            echo -n "state=floating center=on border=off"
        fi
        echo " desktop=Z follow=on"
        ;;
    firefox_app_*)
        eval "$consequences"
        echo "desktop=M follow=on"
        ;;
    '')
        case $procCommand in
            (spotify)
                echo "desktop=M follow=on"
                ;;
        esac;;
esac
